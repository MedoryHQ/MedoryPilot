model Language {
  id String @id @default(uuid(7)) @db.Uuid

  code  String @unique
  name  String
  order Int    @default(autoincrement())

  headerTranslations           HeaderTranslation[]
  introduceTranslations        IntroduceTranslation[]
  newsTranslations             NewsTranslation[]
  serviceTranslations          ServiceTranslation[]
  FAQTranslations              FAQTranslation[]
  blogTranslations             BlogTranslation[]
  categoryTranslations         CategoryTranslation[]
  contactTranslations          ContactTranslation[]
  examinationSheetTranslations ExaminationSheetTranslation[]
  icdTranslations              ICDTranslation[]
  recipeUnitTranslations       RecipeUnitTranslation[]
  pageComponentTranslations    PageComponentTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("languages")
}

model File {
  id String @id @default(uuid()) @db.Uuid

  name String
  path String
  size Int

  header            Header?  @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId          String?  @unique @db.Uuid
  news              News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId            String?  @unique @db.Uuid
  blog              Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId            String?  @unique @db.Uuid
  contact           Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId         String?  @unique @db.Uuid
  visit             Visit?   @relation(fields: [visitId], references: [id])
  visitId           String?  @unique @db.Uuid
  theme             Theme?   @relation(fields: [themeId], references: [id])
  themeId           String?  @unique @db.Uuid
  social            Social?  @relation(fields: [socialId], references: [id])
  socialId          String?  @unique @db.Uuid
  serviceIcon       Service? @relation("ServiceIcon")
  serviceBackground Service? @relation("ServiceBackground")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("files")
}

model RefreshToken {
  id String @id @default(uuid(7)) @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Header {
  id String @id @default(uuid(7)) @db.Uuid

  logo File?

  translations HeaderTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String?

  @@map("header")
}

model Introduce {
  id String @id @default(uuid(7)) @db.Uuid

  translations IntroduceTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String?

  @@map("introduce")
}

model News {
  id String @id @default(uuid(7)) @db.Uuid

  slug          String            @unique
  background    File?
  translations  NewsTranslation[]
  showInLanding Boolean           @default(false)
  order         Int?

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("news")
}

model Service {
  id String @id @default(uuid()) @db.Uuid

  translations ServiceTranslation[]

  icon   File?   @relation("ServiceIcon", fields: [iconId], references: [id], onDelete: Cascade)
  iconId String? @unique @db.Uuid

  background   File?   @relation("ServiceBackground", fields: [backgroundId], references: [id], onDelete: Cascade)
  backgroundId String? @unique @db.Uuid

  visits Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model FAQ {
  id String @id @default(uuid(7)) @db.Uuid

  order        Int              @default(autoincrement())
  translations FAQTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Blog {
  id String @id @default(uuid(7)) @db.Uuid

  background   File?
  categories   Category[]
  starredUsers User[]            @relation("BlogStars")
  stars        Int               @default(0)
  translations BlogTranslation[]

  slug          String  @unique
  showInLanding Boolean @default(false)
  landingOrder  Int     @default(autoincrement())

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Category {
  id String @id @default(uuid()) @db.Uuid

  blogs        Blog[]
  translations CategoryTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Contact {
  id String @id @default(uuid()) @db.Uuid

  location     String?
  background   File?
  translations ContactTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Tariff {
  id String @id @default(uuid()) @db.Uuid

  price   Float
  history TariffHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tariffs")
}

model TariffHistory {
  id String @id @default(uuid()) @db.Uuid

  price    Float
  fromDate DateTime
  endDate  DateTime

  current  Tariff @relation(fields: [tariffId], references: [id])
  tariffId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tariffs_history")
}

model Theme {
  id      String  @id @default(uuid()) @db.Uuid
  name    String
  active  Boolean @default(true)
  colors  Color[]
  preview File?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String?  @db.Uuid

  @@map("themes")
}

model Color {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  value String

  theme   Theme  @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([themeId, name])
  @@map("colors")
}

model Footer {
  id String @id @default(uuid())

  socials Social[]
  pages   PageComponent[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Social {
  id String @id @default(uuid(7)) @db.Uuid

  url  String
  name String
  icon File?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Footer    Footer?  @relation(fields: [footerId], references: [id])
  footerId  String?

  @@map("socials")
}

model PageComponent {
  id String @id @default(uuid(7)) @db.Uuid

  slug        String @unique
  footerOrder Int    @default(autoincrement())

  translations PageComponentTranslation[]

  footer   Footer @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId String @unique @db.Uuid

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_components")
}
